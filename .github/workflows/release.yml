name: Build and publish a Docker image

# Configures this workflow to run every time a main branch pull request has been merged.
on:
  # This workflow will run when a pull request is closed and merged into the main branch.
  pull_request:
    types: ["closed"]
  # This workflow will run when a tag matching the specified pattern is pushed.
#  push:
#    tags: ['[0-9].[0-9].[0-9]']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  PYTHON_VERSION: '3.11.9'
  POETRY_VERSION: '1.7.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: eu-west-2
  SENTRY_TRACES_SAMPLE_RATE: 1.0
  SENTRY_PROFILES_SAMPLE_RATE: 0.5
  SENTRY_SAMPLE_RATE: 50
  USERNAME: foo@example.com
  SERVICE_NAME: user-service
  LOG_LEVEL: DEBUG
  ENVIRONMENT: test
  APP_HOST: localhost
  UVICORN_PORT: 8002
  JWT_SECRET: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
  JWT_EXPIRY_SECONDS: 3600
  QUEUE_PROTOCOL: PLAINTEXT
  QUEUE_HOST: localhost
  QUEUE_PORTS: 9092,9093,9094
  QUEUE_ACKS: all
  QUEUE_POLL_WAIT_SECONDS: 1
  QUEUE_TOPIC_NAME: email-topic
  QUEUE_GROUP_ID: email-topic-group
  EMAIL_ACCOUNT_VERIFICATION_TYPE: ACCOUNT_VERIFICATION
  ALB_URL: http://localhost
  AUTH_SERVICE_URL: http://localhost:8001
  DB_HOST: localhost
  DB_PORT: 5432
  DB_USERNAME: postgres
  DB_PASSWORD: postgres
  DB_NAME: users
  JWT_SECRET_VERIFY_ACCOUNT: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABC
  JWT_EXPIRY_SECONDS_VERIFY_ACCOUNT: 3600

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - run: |
          echo The PR was merged!

  # app_version outputs
  check-version:
    runs-on: ubuntu-latest
    needs: [ if_merged ]
    outputs:
      app_version: ${{ steps.app_version_step.outputs.app_version }}

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      # create app_version
      - name: Run version check script
        id: app_version_step
        env:
          REPO: ${{ github.repository }}
        run: |
          latest_release_version=$(curl -s https://api.github.com/repos/$REPO/releases/latest | jq -r .tag_name)
          echo "Latest release: $latest_release_version"
          make check-version RELEASE_VERSION=$latest_release_version
          app_version=$(poetry run python scripts/app_version.py)
          echo "app_version=$app_version" >> "$GITHUB_OUTPUT"
          
  create-tag:
    runs-on: ubuntu-latest
    needs: [ check-version ]
    permissions:
      contents: write
    env:
      BRANCH_NAME: ${{ needs.check-version.outputs.app_version }}

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      - name: Create and push tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.app_version }}
          generate_release_notes: true

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [ check-version, create-tag ]
    permissions:
      contents: read
      packages: write
      pages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          flavor: |
            latest=true
            prefix=
            suffix=
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ needs.check-version.outputs.app_version }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgettable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
