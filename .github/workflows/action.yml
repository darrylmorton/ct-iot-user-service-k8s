name: Build, Lint, Tests

on:
  workflow_call:
    outputs:
      cache-key:
        description: "Cache key for Poetry dependencies"
        value: ${{ jobs.build.outputs.output1 }}

env:
  PYTHON_VERSION: '3.11.9'
  POETRY_VERSION: '1.7.1'
  AWS_REGION: eu-west-2
  SENTRY_TRACES_SAMPLE_RATE: 1.0
  SENTRY_PROFILES_SAMPLE_RATE: 0.5
  SENTRY_SAMPLE_RATE: 50
  USERNAME: foo@example.com
  SERVICE_NAME: user-service
  LOG_LEVEL: DEBUG
  ENVIRONMENT: test
  APP_HOST: localhost
  UVICORN_PORT: 8002
  JWT_SECRET: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
  JWT_EXPIRY_SECONDS: 3600
  QUEUE_PROTOCOL: PLAINTEXT
  QUEUE_HOST: localhost
  QUEUE_PORTS: 9092,9093,9094
  QUEUE_ACKS: all
  QUEUE_POLL_WAIT_SECONDS: 1
  QUEUE_TOPIC_NAME: email-topic
  QUEUE_GROUP_ID: email-topic-group
  EMAIL_ACCOUNT_VERIFICATION_TYPE: ACCOUNT_VERIFICATION
  ALB_URL: http://localhost
  AUTH_SERVICE_URL: http://localhost:8001
  DB_HOST: localhost
  DB_PORT: 5432
  DB_USERNAME: postgres
  DB_PASSWORD: postgres
  DB_NAME: users
  JWT_SECRET_VERIFY_ACCOUNT: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABC
  JWT_EXPIRY_SECONDS_VERIFY_ACCOUNT: 3600

jobs:


  build:
    name: Generate output
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.cached_poetry_dependencies_step.outputs.poetry_cache_key }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Generate Cache Key
        id: cached_poetry_dependencies_step

        run: |
          poetry_cache_key="venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}"
          echo "poetry_cache_key=$poetry_cache_key" >> "$GITHUB_OUTPUT"

      - name: Load cached venv
        id: cached_poetry_dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ steps.cached_poetry_dependencies_step.outputs.poetry_cache_key }}

      - name: Install dependencies
        if: steps.cached_poetry_dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

#  lint:
#    runs-on: ubuntu-latest
#    needs: [ build ]
#
#    steps:
      - name: Run lint
        run: make lint

#  unit-tests:
#    runs-on: ubuntu-latest
#    needs: [ build, lint ]
#
#    steps:
      - name: Run unit tests
        run: make test-unit
#
#  integration-tests:
#    runs-on: ubuntu-latest
#    needs: [ build, lint ]
#
#    steps:
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup dependencies
        run: docker compose -f docker-compose.yml up -d

      - name: Sleep for 10s
        uses: juliangruber/sleep-action@v2.0.0
        with:
          time: 5s

      - name: Docker running containers
        run: docker ps -a

      - name: Curl Authentication Service Health Check
        run: curl http://localhost:8001/healthz

      - name: Run integration tests
        run: make migrations && make test-integration