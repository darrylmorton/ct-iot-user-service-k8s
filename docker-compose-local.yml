services:
  users-db:
    container_name: users-db
    image: postgres:16.0-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users
    healthcheck :
      test: [ "CMD", "pg_isready", "-q", "-d", "users", "-U", "postgres" ]
      interval : 5s
      timeout : 5s
      retries : 5

  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.8.0.arm64
    hostname: zookeeper-1
    container_name: zookeeper-1
#    volumes:
#      - ./bin/zookeeper-1_data:/var/lib/zookeeper/data
#      - ./bin/zookeeper-1_log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper-1:2888:3888;2181

  broker-1:
    image: confluentinc/cp-kafka:7.8.0.arm64
    hostname: broker-1
    container_name: broker-1
#    volumes:
#      - ./bin/broker-1-data:/var/lib/kafka/data
    depends_on:
      - zookeeper-1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,INTERNAL://broker-1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: HOST:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_SNAPSHOT_TRUST_EMPTY: true
#      TOPIC_NAME: email-topic
#    healthcheck:
#      test: [ "CMD-SHELL", "./scripts/kafka-topics.sh --bootstrap-server broker-1:9092 --list" ]
#      interval: 5s
#      timeout: 10s
#      retries: 5

#  rest-proxy:
#    image: confluentinc/cp-kafka-rest:7.8.0.arm64
#    ports:
#      - "8082:8082"
#    depends_on:
#      - zookeeper-1
#      - broker-1
#    hostname: rest-proxy
#    container_name: rest-proxy
#    environment:
#      KAFKA_REST_HOST_NAME: rest-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS: "broker-1:29092"
#      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"

  kafka-init:
    image: confluentinc/cp-kafka:7.8.0.arm64
    depends_on:
      - broker-1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker-1:29092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker-1:29092 --create --if-not-exists --topic email-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker-1:29092 --list
      "

  authentication-service:
    container_name: authentication-service
    image: ct-iot-authentication-service:dev
    ports:
      - "8001:8001"
    environment:
      - SENTRY_TRACES_SAMPLE_RATE=1.0
      - SENTRY_PROFILES_SAMPLE_RATE=0.5
      - SENTRY_SAMPLE_RATE=50
      - ENVIRONMENT=test
      - LOG_LEVEL=DEBUG
      - SERVICE_NAME=authentication-service
      - UVICORN_PORT=8001
      - JWT_SECRET=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
      - JWT_EXPIRY_SECONDS=3600
    depends_on:
      users-db:
        condition: service_healthy
#      broker-1:
#        condition: service_healthy